{"remainingRequest":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/docs/guide/history.md?vue&type=template&id=7ef26542&","dependencies":[{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/docs/guide/history.md","mtime":1602927273216},{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/cache-loader/dist/cjs.js","mtime":1601365812750},{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1594039947428},{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/cache-loader/dist/cjs.js","mtime":1601365812750},{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/vue-loader/lib/index.js","mtime":1594039947428},{"path":"/Users/emmelinemartens/Documents/cursussen/WOT/research-EMMELINEMARTENS/node_modules/@vuepress/markdown-loader/index.js","mtime":1601365813355}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}